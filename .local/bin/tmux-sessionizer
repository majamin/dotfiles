#!/usr/bin/env bash

# set -x

if [[ $EDITOR == "" ]]; then
  EDITOR="nano"
fi

# directories to include
INCLUDE="\
  $HOME/.config \
  $HOME/.local \
  $HOME/Projects \
  $ONEDRIVE
  "

EXCLUDE="\
  --exclude .cache \
  --exclude .git \
  --exclude node_modules \
  "

FD_OPTS="\
  --color never \
  --type d      \
  --hidden      \
  --follow      \
  --min-depth 1 \
  --max-depth 5 \
  "

# TODO: incomplete - need to add exclude patterns
FIND="find $INCLUDE -type d -not -path '*/\.*' -not -path '*/\.git/*' -not -path '*/node_modules/*'"

if command -v fd >/dev/null 2>&1; then
  FIND="fd . $INCLUDE $FD_OPTS $EXCLUDE "
fi
if command -v fd-find >/dev/null 2>&1; then
  FIND="fd-find . $INCLUDE $FD_OPTS $EXCLUDE "
fi

# $1: session name
# $2: working directory
attach_or_switch() {
  if [[ $2 == "" ]]; then
    make_session "$1"
  else
    make_session "$1" "$2"
  fi
  if [[ -n "$TMUX" ]]; then
    tmux switch-client -t "$1"
  else
    tmux attach-session -t "$1"
  fi
}

# truncate a long string with spaces into a nice session name
# remove spaces and special characters and cut to 20 characters
# $1: long string (possibly a command)
trunc() {
  echo "$1" | tr -d ' ' | cut -c -20
}

# is the session running?
# $1: session name
has_session() {
  return $(tmux has -t "$1" 2>/dev/null)
}

# create a session if it doesn't exist
# $1: session name
# $2: working directory
make_session() {
  if ! has_session "$1"; then
    tmux new-session -d -s "$1" -c "$2"
  fi
}

green() {
  echo -e "\x1B[32m$1\x1B[0m"
}

red() {
  echo -e "\x1B[31m$1\x1B[0m"
}

usage() {
  echo "Usage:"
  echo "       $(green tmux-sessionizer)"
  echo "           (search for a directory using fd and open it in a session)"
  echo "       $(green tmux-sessionizer) -h"
  echo "           (print this message)"
  echo "       $(green tmux-sessionizer) -l"
  echo "           (list sessions and attach to the selected one)"
  echo "       $(green tmux-sessionizer) <file>"
  echo "           (create a session with the file's name and open it with \$EDITOR (default is nano))"
  echo "       $(green tmux-sessionizer) <directory>"
  echo "           (create a session with the directory's name and cd into it)"
  echo "       $(green tmux-sessionizer) <command>"
  echo "           (create a session with the command and run it)"
  echo
}

###   main   ###
# if no arguments, search for a directory using FIND and open it in a session
# if only one argument and it is a file, create a session with the file's name and open it neovim
# if only one argument and it is a directory, create a session with the directory's name and cd into it
# if there are multiple arguments, assume that it is a command and run it in a session using trunc

# no arguments
if [[ $# -eq 0 ]]; then
  selected="$($FIND | fzf)"
  if [[ -z "$selected" ]]; then
    exit 0
  fi
  selected_name="$(basename "$selected" | tr . _)"
  attach_or_switch "$selected_name" "$selected"
  exit 0
fi

# -l flag
if [[ "$1" == "-l" ]]; then
  if [[ $# -gt 1 ]]; then
    shift
    echo -e "$(red "Too many arguments passed to -l:") $@"
    usage
    exit 1
  fi
  available_sessions="$(tmux list-sessions -F "#{session_name}")"
  if [[ -z "$available_sessions" ]]; then
    echo "No sessions found"
    exit 0
  fi
  attach_or_switch "$(echo $available_sessions | fzf)"
  exit 0
fi

# >=1 arguments
if [[ $# -ge 1 ]]; then
  if [[ $# -eq 1 && "$1" == "-h" ]]; then
    usage
    exit 0
  fi
  if [[ $# -eq 1 ]]; then
    if [[ -f "$1" ]]; then
      selected_name="$(basename "$1" | tr . _)"
      make_session "$selected_name"
      tmux send-keys -t "$selected_name" "$EDITOR $1" Enter
      attach_or_switch "$selected_name" "$(dirname "$1")"
      exit 0
    # if . was used for current directory
    elif [[ "$1" == "." ]]; then
      selected_name="$(basename "$PWD" | tr . _)"
      attach_or_switch "$selected_name" "$PWD"
      exit 0
    elif [[ -d "$1" ]]; then
      selected_name="$(basename "$1" | tr . _)"
      attach_or_switch "$selected_name" "$1"
      exit 0
    fi
  else
    commands="$@"
    selected_name="$(trunc "$commands")"
    make_session "$selected_name"
    tmux send-keys -t "$selected_name" "$commands" Enter
    attach_or_switch "$selected_name"
    exit 0
  fi
fi

echo -e "$(red "Invalid arguments:") $@"
usage
